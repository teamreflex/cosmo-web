---
description: Database rules for working with Drizzle ORM
globs: src/**/*.ts
alwaysApply: false
---
The project contains three Postgres database connections:
- `import { db } from "@/lib/server/db"`
  - general Neon Postgres HTTP connection for entities: cosmoAccounts, lockedObjekts, objektLists, objektListEntries, objektMetadata, pins, cosmoTokens, gravities, gravityPolls, gravityPollCandidates, polygonVotes, user, session, acocunt, verification
- `import { dbi } from "@/lib/server/db/interactive"`
  - same Neon Postgres connection but over websockets. only use this when needing to use transactions.
- `import { indexer } from "@/lib/server/db/indexer"`
  - Postgres connection for querying the blockchain indexer for objekt data.
  - entities are: collections, objekts, transfers, comoBalances, votes

When fetching from the database, if the query is simple, use the relational API v2:
```ts
const profile = await db.query.cosmoAccounts.findFirst({
  where: {
    username: 'username',
  },
  with: {
    lists: true,
  },
});
```

Otherwise, use the query builder:
```ts
const cosmo = await db.select()
                        .from(cosmoAccounts)
                        .leftJoin(objektLists, eq(profiles.userId, lists.userId))
                        .where(eq(cosmoAccounts.username, 'username'));
```

Always do your best to use the query builder utilities instead of writing raw SQL.